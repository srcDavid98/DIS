package server.repository;

import server.util.Config;

import java.sql.*;

/**
 * Contains basic methods for repositories. Should not require modification.
 * Uses Hikari connection pools.
 */
class BaseRepository {

    BaseRepository() { }


    public static  Connection getConnection() throws SQLException {
        return Config.getHikariDataSource().getConnection();


}

    /**
     * Creates a prepared statement for executing against the database with parameters.
     * @param sql The SQL to be executed.
     * @return The prepared statement.
     */

    //FÃ¸rer til feil ved invokering under getAccounts (alle kontoer for alle brukere)
    PreparedStatement prepareQuery(String sql) {

        Connection connection = null;
        ResultSet rs = null;
        try {
            return getConnection().prepareStatement(sql);
        }
        catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    //DbCon implementering.
    PreparedStatement prepareQuery2(Connection connection, String sql) {

        try {
            return connection.prepareStatement(sql);
        }
        catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }





    /**
     * Executes a prepared statement against the database.
     * @param ps The prepared statement.
     * @return The resultset.
     */
    ResultSet executePreparedStatementQuery(PreparedStatement ps) {
        ResultSet rs = null;
        try {
            if(ps.execute())
                rs = ps.getResultSet();
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
        return rs;
    }

    /**
     * Makes a prepared statement from SQL, which allows to set parameters, like:
     * ps.setString(1, [STRING VALUE]);
     *
     * @param sql An SQL string, with parameters.
     * @return The prepared statement, which can be executed with executeInsertPreparedStatement
     */
    public PreparedStatement prepareInsert(String sql) {
        try {
            return getConnection().prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
        }
        catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    /**
     * Executes a previously prepared inser statement against the database.
     * @param statement The prepared statement
     * @return The value of primary key generated by executing the prepared statement
     */
    public int executeInsertPreparedStatement(PreparedStatement statement) {
        int result = 0;

        try {
            result = statement.executeUpdate();

            ResultSet generatedKeys = statement.getGeneratedKeys();
            if (generatedKeys.next()) {
                return generatedKeys.getInt(1);
            }
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }

        return result;
    }

    //Connection patch
    public void cleanUp(Statement s)
    {
        cleanUp(null, s);
    }

    public void cleanUp(ResultSet rs, Statement s)
    {
        if (rs != null) {
            try {
                rs.close();
            } catch (SQLException e) {
                System.out.println("Error: Could not close result set. This points to an error with the database setup. ");
            }
        }
        if (s != null) {
            Connection c = null;
            try {
                c = s.getConnection();
            } catch (SQLException e) {
                System.out.println("Error!: Could not get connection. This points to an error with the database setup. ");
            }
            try {
                s.close();
            } catch (SQLException e) {
                System.out.println("Error: Could not close SQL Statement. This points to an error with the database setup. ");
            }
            if (c != null) {
                try {
                    c.close();
                } catch (SQLException e) {
                    System.out.println("Error: Could not close return connection to connection pool. This points to an error with the database setup. ");
                }
            }

        }

    }

}
